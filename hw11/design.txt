
Data structures:
For this program I will use lists of lists for the Board class.

classes:
1. Tiles class
   This class creates a black and white tile with x and y coordinates.
   methods in this class:
   1) black_tile(): Draws a black tile on the board
   2) white_tile(): Draws a white tile on the board

2. Board class
   This class creates the game board with 400 width and 400 height and draws 
   the first four tiles in the middle of the board. It also handles 
   adding additional tiles on the board and how the tiles are placed.
   methods in this class:
   1)draw_four_tiles(): Draw the initial four tiles in the middle of the board
   2)coordinate():convert mouse coordinates to square index
   3)exist_tiles():When a tile exists already, nothing happens
   4)add_tile():When the previous tile is black, draw white
                When the previous tile is white, drw black

3. Game controller class
   This class handles the game result. In this mini program, the result will always
   be a tie as we are alternating between black and white. In the final project, we 
   will figure out who wins in this class.

4. Othello
   1) draw():Checks whether the position the mouse clicked is filled or empty.If it is empty, draw
      the opposite color of the previous color. 


A bullet-pointed pseudocode of your driver:
1) A method to check if the square is filled
2) A method to check if the move is legal or not
3) If the square is legal and not filled: draw the appropriate color and flip the correspomding tiles
4) If the square is not legal: do nothing
5) If the square is filled: do nothing
6) A method to check who is the winner and prints the score

